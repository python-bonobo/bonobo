import fastavro
# from fastavro import writer, reader, parse_schema

from bonobo.config import Option, use_context
from bonobo.constants import NOT_MODIFIED
from bonobo.nodes.io.base import FileHandler
from bonobo.nodes.io.file import FileReader, FileWriter
from bonobo.util import ensure_tuple
from bonobo.util.collections import coalesce, tuple_or_const


class AvroHandler(FileHandler):
    """

    .. attribute:: item_names

        The names of the items in the Avro, if it is not defined in the first item of the Avro.

    """

    fields = Option(tuple, required=False)
    name = Option(str, required=False)
    namespace = Option(str, required=False)
    doc = Option(str, required=False)


@use_context
class AvroReader(FileReader, AvroHandler):
    """
    Reads a record from avro file and yields the rows in dicts.
    """

    mode = Option(str, default="rb")

    def read(self, file, context, *, fs):
        avro_reader = fastavro.reader(file)

        # TODO : fill the output_fields
        if not context.output_type:
            context.set_output_fields(self.fields)

        for row in avro_reader:
            yield tuple(row)


    __call__ = read


@use_context
class AvroWriter(FileWriter, AvroHandler):
    mode = Option(str, default="wb")

    def build_schema(self, context):
        schema_doc = coalesce(self.doc, "generated by bonobo")
        schema_name = coalesce(self.doc, "output")
        schema_namespace = coalesce(self.doc, "avro")
        props = coalesce(self.fields, context.get_input_fields())

        schema = {
            'type': 'record',
            'name': schema_name,
            'namespace': schema_namespace,
            'doc': schema_doc,
            'fields': [
                {'name': 'station', 'type': 'string'},
                {'name': 'time', 'type': 'long'},
                {'name': 'temp', 'type': 'int'},
            ],
        }
        return schema


    def write(self, file, context, *values, fs):
        """
        Write a record to the opened file.
        """
        context.setdefault("schema", None)

        if not context.schema:
            schema = self.build_schema(context)
            parsed_schema = fastavro.parse_schema(schema)
            context.schema = parsed_schema

        fastavro.writer(file, context.schema, values)

    __call__ = write
